name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'  # Trigger on all branches
  pull_request:
    branches:
      - master  # Only pull requests to master will trigger the full pipeline

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.11]
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install the required dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set environment variables for development when on a non-master branch
      - name: Set environment variables for development
        if: github.ref != 'refs/heads/master'
        run: |
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "DJANGO_LOG_LEVEL=DEBUG" >> $GITHUB_ENV

      # Set environment variables for production when on the master branch
      - name: Set environment variables for production
        if: github.ref == 'refs/heads/master'
        run: |
          echo "DEBUG=False" >> $GITHUB_ENV
          echo "DJANGO_LOG_LEVEL=ERROR" >> $GITHUB_ENV

      # Run the tests with coverage
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-config=.coveragerc
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      # Check the test coverage report
      - name: Check coverage
        run: |
          coverage report

  containerize:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event.pull_request.base.ref == 'refs/heads/master'
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Create the .env file with environment variables for production
      - name: Create .env file
        run: |
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "DJANGO_LOG_LEVEL=DEBUG" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "DEBUG=False" >> .env

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker image to Docker Hub
      - name: Build and push Docker image to Docker Hub
        run: |
          docker build --build-arg AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} \
                       --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
                       --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                       --build-arg DEBUG=${{ env.DEBUG }} \
                       -t ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }}
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DJANGO_LOG_LEVEL: 'ERROR'
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEBUG: 'False'

  deploy:
    needs: containerize
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event.pull_request.base.ref == 'refs/heads/master'
    steps:
      # Configure AWS credentials for accessing AWS services
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Create an ECR repository if it doesn't exist
      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names oc_lettings_site || aws ecr create-repository --repository-name oc_lettings_site
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Pull the Docker image from Docker Hub and push it to ECR
      - name: Pull Docker image from Docker Hub and push to ECR
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/oc_lettings_site:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/oc_lettings_site:${{ github.sha }}

      # Register the new task definition in ECS
      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition my-django-app)
          echo "TASK_DEFINITION=$TASK_DEFINITION"
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/oc_lettings_site:${{ github.sha }}" '.taskDefinition | .containerDefinitions[0].image=$IMAGE | del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          echo "NEW_TASK_DEF=$NEW_TASK_DEF"
          NEW_TASK_DEF_REVISION=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF")
          echo "NEW_TASK_DEF_REVISION=$NEW_TASK_DEF_REVISION"
          echo "::set-output name=task-def-arn::$(echo $NEW_TASK_DEF_REVISION | jq -r .taskDefinition.taskDefinitionArn)"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_DEFAULT_REGION: us-east-1

      # Deploy the new task definition to the ECS service
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster my-django-cluster --service my-django-service --task-definition ${{ steps.register-task-def.outputs.task-def-arn }} --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_DEFAULT_REGION: us-east-1
