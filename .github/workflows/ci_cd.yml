name: CI/CD Pipeline

on:
  # Triggers the workflow on push events to the specified branches
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - master
      - dev

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.11]
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set environment variables for the development branch
      - name: Set environment variables for development
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "DJANGO_LOG_LEVEL=DEBUG" >> $GITHUB_ENV

      # Set environment variables for the production branch
      - name: Set environment variables for production
        if: github.ref == 'refs/heads/master'
        run: |
          echo "DEBUG=False" >> $GITHUB_ENV
          echo "DJANGO_LOG_LEVEL=ERROR" >> $GITHUB_ENV

      # Run tests and calculate coverage
      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-config=.coveragerc
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      # Check if the test coverage meets the required threshold
      - name: Check coverage
        run: |
          coverage report

  containerize:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image to Docker Hub
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }}
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DJANGO_LOG_LEVEL: 'ERROR'
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEBUG: 'False'

  deploy:
    needs: containerize
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Pull Docker image from Docker Hub and push to ECR
      - name: Pull Docker image from Docker Hub and push to ECR
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/oc_lettings_site:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/oc_lettings_site:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/oc_lettings_site:${{ github.sha }}

      # Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster my-django-cluster --service my-django-service --force-new-deployment
